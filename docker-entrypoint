#!/usr/bin/env bash

# Exit build script on first failure.
set -e

# Exit on unset variable.
set -u

PS_ARGS="$*"
readonly PS_ARGS

# Parse the -db flag to PicoShare since we need to know it before passing it
# along.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -db) DB_PATH="$2"; shift 2;;
    -db=*) DB_PATH="${1#*=}"; shift 1;;
    *) shift 1;;
  esac
done
readonly DB_PATH
# We need to export DB_PATH because litestream.yml references it.
export DB_PATH

is_litestream_enabled() {
  set +ux

  local IS_ENABLED='false'

  if [[ -n "${LITESTREAM_BUCKET}" ]]; then
    IS_ENABLED='true';
  fi

  set -ux

  echo "${IS_ENABLED}"
}

IS_LITESTREAM_ENABLED="$(is_litestream_enabled)"
readonly IS_LITESTREAM_ENABLED

# Echo commands to stdout.
set -x

PS_LAUNCH_CMD="/app/picoshare ${PS_ARGS}"

if [[ "${IS_LITESTREAM_ENABLED}" == 'true' ]]; then
  /app/litestream version
  echo "LITESTREAM_BUCKET=${LITESTREAM_BUCKET}"
  echo "LITESTREAM_ENDPOINT=${LITESTREAM_ENDPOINT}"
  echo "LITESTREAM_RETENTION=${LITESTREAM_RETENTION}"

  if [[ -f "$DB_PATH" ]]; then
    echo "Existing database is $(stat -c %s "${DB_PATH}") bytes"
  else
    echo "No existing database found"
    # Restore database from remote storage.
    /app/litestream restore -if-replica-exists -v "${DB_PATH}"
  fi

  # Let Litestream start PicoShare as a child process
  exec /app/litestream replicate -exec "$PS_LAUNCH_CMD"
else
  echo "Starting without litestream"
  eval "exec ${PS_LAUNCH_CMD}"
fi
