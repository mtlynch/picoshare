version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_frontend:
    docker:
      - image: cimg/node:16.14.2
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Check formatting
          command: npm run check-format
      - run:
          name: Check lint
          command: npm run lint
  test_go:
    docker:
      - image: cimg/go:1.17.4
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: .coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
      - save_cache:
          key: go-mod-v3-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
  e2e:
    # We're choosing large even though xlarge is faster because CircleCI takes
    # too long to provision xlarge instances.
    resource_class: large
    machine:
      # Choose an explicit machine image so that we get the latest version of
      # docker-compose.
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Perform e2e tests.
          command: dev-scripts/run-e2e-tests
      - store_artifacts:
          path: e2e/cypress/videos
      - store_artifacts:
          path: e2e/cypress/screenshots
  build_docker_images:
    docker:
      - image: cimg/base:stable
    environment:
      BUILD_TARGETS: "linux/arm/v7,linux/arm64,linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_ACCESS_TOKEN" | \
              docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Enable multiarch builds with QEMU
          command: |
            docker run \
              --rm \
              --privileged \
              multiarch/qemu-user-static \
              --reset \
              -p yes
      - run:
          name: Create multiarch build context
          command: docker context create builder
      - run:
          name: Create multiplatform builder
          command: |
            docker buildx create builder \
              --name builder \
              --driver docker-container \
              --use
      - run:
          name: Ensure builder has booted
          command: docker buildx inspect --bootstrap
      - run:
          name: Build docker images
          command: |
            docker buildx build \
              --push \
              --platform "$BUILD_TARGETS" \
              --tag "mtlynch/picoshare:${CIRCLE_TAG}" \
              --tag mtlynch/picoshare:latest \
              .
  deploy:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Print flyctl version
          command: |
            "${HOME}/.fly/bin/flyctl" version
      - run:
          name: Deploy to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy \
              --access-token "${FLY_ACCESS_TOKEN}" \
              --local-only
workflows:
  version: 2
  test_deploy:
    jobs:
      - check_whitespace
      - check_frontend
      - test_go
      - e2e
      - build_docker_images:
          requires:
            - check_whitespace
            - check_frontend
            - test_go
            - e2e
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+){2}/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - check_whitespace
            - check_frontend
            - test_go
            - e2e
          filters:
            branches:
              only: master
