version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.8.0
    steps:
      - run:
          name: Install dependencies needed to check out repo
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  lint_sql:
    docker:
      - image: sqlfluff/sqlfluff:1.2.1
        user: root
    steps:
      - checkout
      - run:
          name: Lint SQL files
          command: |
            sqlfluff lint \
              --disable_progress_bar \
              --dialect sqlite \
              store/sqlite/migrations
  check_frontend:
    docker:
      - image: cimg/node:16.14.2
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Run frontend checks
          command: ./dev-scripts/build-frontend
  test_go:
    docker:
      - image: cimg/go:1.18.4
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: .coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
      - save_cache:
          key: go-mod-v3-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
  build_backend:
    docker:
      - image: cimg/go:1.18.4
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Compile production backend
          command: dev-scripts/build-backend
      - run:
          name: Compile dev backend
          command: dev-scripts/build-backend dev
      - persist_to_workspace:
          root: ./
          paths:
            - ./bin/picoshare
            - ./bin/picoshare-dev
  e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.32.1-focal
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: cd e2e && npm install
      - run:
          name: Run end-to-end tests
          command: ./dev-scripts/run-e2e-tests --skip-build
      - store_artifacts:
          path: e2e/playwright-report
  build_binaries:
    docker:
      - image: cimg/base:stable
    environment:
      BUILD_TARGETS: "linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: Enable multiarch builds with QEMU
          command: |
            docker run \
              --rm \
              --privileged \
              multiarch/qemu-user-static \
              --reset \
              -p yes
      - run:
          name: Create multiarch build context
          command: docker context create builder
      - run:
          name: Create multiplatform builder
          command: |
            docker buildx create builder \
              --name builder \
              --driver docker-container \
              --use
      - run:
          name: Ensure builder has booted
          command: docker buildx inspect --bootstrap
      - run:
          name: Build binaries
          command: |
            docker buildx build \
              --platform "${BUILD_TARGETS}" \
              --target=artifact \
              --output "type=local,dest=$(pwd)/build/" \
              .
      - store_artifacts:
          path: build
  package_release:
    docker:
      - image: cimg/base:stable
    environment:
      BUILD_TARGETS: "linux/arm/v7,linux/arm64,linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: Build binaries
          command: |
            docker buildx build \
              --platform "${BUILD_TARGETS}" \
              --target=artifact \
              --output "type=local,dest=$(pwd)/build/" \
              .
      - run:
          name: Package binaries for distribution
          command: ./dev-scripts/package-binaries "${CIRCLE_TAG}"
      - persist_to_workspace:
          root: ./
          paths:
            - ./dist
  publish_release:
    docker:
      - image: cibuilds/github:0.13.0
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Publish release on GitHub
          command: |
            VERSION="${CIRCLE_TAG}"
            ghr \
              -token "${GITHUB_TOKEN}" \
              -username "${CIRCLE_PROJECT_USERNAME}" \
              -repository "${CIRCLE_PROJECT_REPONAME}" \
              -commitish "${CIRCLE_SHA1}" \
              -replace "${VERSION}" \
              ./dist/
  publish_docker_images:
    docker:
      - image: cimg/base:stable
    environment:
      BUILD_TARGETS: "linux/arm/v7,linux/arm64,linux/amd64"
    steps:
      - run:
          name: Authenticate to Docker Hub
          command: echo "${DOCKERHUB_ACCESS_TOKEN}" | \
            docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
      - run:
          name: Publish docker images
          command: |
            docker buildx build \
              --push \
              --platform "${BUILD_TARGETS}" \
              --tag "mtlynch/picoshare:${CIRCLE_TAG}" \
              --tag mtlynch/picoshare:latest \
              .
  deploy:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Print flyctl version
          command: |
            "${HOME}/.fly/bin/flyctl" version
      - run:
          name: Deploy to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy \
              --access-token "${FLY_ACCESS_TOKEN}" \
              --local-only
workflows:
  version: 2
  test_deploy:
    jobs:
      - check_whitespace:
          filters:
            tags:
              only: /.*/
      - check_bash:
          filters:
            tags:
              only: /.*/
      - lint_sql:
          filters:
            tags:
              only: /.*/
      - check_frontend:
          filters:
            tags:
              only: /.*/
      - test_go:
          filters:
            tags:
              only: /.*/
      - build_backend:
          filters:
            tags:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /.*/
          requires:
            - build_backend
      - build_binaries:
          filters:
            tags:
              only: /.*/
      - package_release:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - build_backend
            - build_binaries
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+){2}/
            branches:
              ignore: /.*/
      - publish_release:
          requires:
            - package_release
          filters:
            tags:
              only: /.*/
      - publish_docker_images:
          requires:
            - package_release
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - build_backend
            - e2e
          filters:
            branches:
              only: master
            tags:
              only: /.*/
