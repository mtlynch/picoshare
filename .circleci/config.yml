version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.8.0
    steps:
      - run:
          name: Install dependencies needed to check out repo
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  lint_sql:
    docker:
      - image: sqlfluff/sqlfluff:1.2.1
        user: root
    steps:
      - checkout
      - run:
          name: Lint SQL files
          command: |
            sqlfluff lint \
              --disable_progress_bar \
              --dialect sqlite \
              store/sqlite/migrations
  check_frontend:
    docker:
      - image: cimg/node:16.14.2
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Check formatting
          command: npm run check-format
      - run:
          name: Check lint
          command: npm run lint
  test_go:
    docker:
      - image: cimg/go:1.18.4
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: .coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
      - save_cache:
          key: go-mod-v3-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
  build_backend:
    docker:
      - image: cimg/go:1.18.4
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Compile production backend
          command: dev-scripts/build-backend
      - run:
          name: Compile dev backend
          command: dev-scripts/build-backend dev
      - persist_to_workspace:
          root: ./
          paths:
            - ./bin/picoshare
            - ./bin/picoshare-dev
  e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.32.1-focal
    environment:
      NODE_ENV: development
      BACKBLAZE_BUCKET: picoshare-e2e-artifacts
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run end-to-end tests
          command: ./dev-scripts/run-e2e-tests --skip-build
      - persist_to_workspace:
          root: ./
          paths:
            - ./playwright-report
      - store_artifacts:
          path: playwright-report
  # Playwright's artifacts don't render correctly in CircleCI, so upload an
  # extra copy to Backblaze.
  # https://github.com/microsoft/playwright/issues/18108
  e2e_results_to_cloud:
    docker:
      - image: cimg/base:stable
    environment:
      BACKBLAZE_BUCKET: picoshare-e2e-artifacts
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Download backblaze CLI tool
          command: |
            wget https://github.com/Backblaze/B2_Command_Line_Tool/releases/latest/download/b2-linux && \
            mv b2-linux b2 && \
            chmod +x b2 && \
            ./b2 version
      - run:
          name: Authorize Backblaze CLI tool
          command: |
            set -u
            ./b2 authorize-account "${BACKBLAZE_KEY_ID}" "${BACKBLAZE_KEY}"
      - run:
          name: Upload artifacts to backblaze bucket
          command: ./b2 sync ./playwright-report "b2://${BACKBLAZE_BUCKET}/artifacts/${CIRCLE_SHA1}/playwright-report"
      - run:
          name: Print public URLs of images
          command: |
            echo "Uploaded images to:"
            echo "https://f002.backblazeb2.com/file/${BACKBLAZE_BUCKET}/artifacts/${CIRCLE_SHA1}/playwright-report/index.html"
  build_docker_images:
    docker:
      - image: cimg/base:stable
    environment:
      BUILD_TARGETS: "linux/arm/v7,linux/arm64,linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_ACCESS_TOKEN" | \
              docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Enable multiarch builds with QEMU
          command: |
            docker run \
              --rm \
              --privileged \
              multiarch/qemu-user-static \
              --reset \
              -p yes
      - run:
          name: Create multiarch build context
          command: docker context create builder
      - run:
          name: Create multiplatform builder
          command: |
            docker buildx create builder \
              --name builder \
              --driver docker-container \
              --use
      - run:
          name: Ensure builder has booted
          command: docker buildx inspect --bootstrap
      - run:
          name: Build docker images
          command: |
            docker buildx build \
              --push \
              --platform "$BUILD_TARGETS" \
              --tag "mtlynch/picoshare:${CIRCLE_TAG}" \
              --tag mtlynch/picoshare:latest \
              .
  deploy:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Print flyctl version
          command: |
            "${HOME}/.fly/bin/flyctl" version
      - run:
          name: Deploy to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy \
              --access-token "${FLY_ACCESS_TOKEN}" \
              --local-only
workflows:
  version: 2
  test_deploy:
    jobs:
      - check_whitespace:
          filters:
            tags:
              only: /.*/
      - check_bash:
          filters:
            tags:
              only: /.*/
      - lint_sql:
          filters:
            tags:
              only: /.*/
      - check_frontend:
          filters:
            tags:
              only: /.*/
      - test_go:
          filters:
            tags:
              only: /.*/
      - build_backend:
          filters:
            tags:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /.*/
          requires:
            - build_backend
      - e2e_results_to_cloud:
          filters:
            branches:
              # Skip forked PRs, as they don't have access to cloud storage
              # credentials.
              ignore: /pull\/[0-9]+/
            tags:
              only: /.*/
          requires:
            - e2e
      - build_docker_images:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - build_backend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+){2}/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - build_backend
            - e2e
          filters:
            branches:
              only: master
            tags:
              only: /.*/
